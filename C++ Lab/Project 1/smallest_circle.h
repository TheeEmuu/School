#ifndef PROJECT1_SMALLEST_CIRCLE_H
#define PROJECT1_SMALLEST_CIRCLE_H
// Those two lines are auto-generated by the IDE.  Why they are there will
// remain a mystery for the time being; they are called "include guards" if
// you want to look it up.

#include <vector>
#include <string>

#include "point.h"

// One of the most obvious differences between Java and C++ is that C++
// allows for "free" functions -- that is, functions that are not part of
// a class.  The closest thing in Java is a public static method, which
// which works the same way (you can have static functions in C++, too).

// Header files contain only interfaces; below are the signatures (usually
// called declarations) for three functions.  The implementations for these
// functions is found in the affiliated .cpp file.

// open up the named file, load the point data, and return it in
// a vector of points.  A vector is similar to an ArrayList; a resizeable array.
std::vector<Point> load_points(const std::string& file_name);

// Find and return the centroid (i.e., average) of a list of points.
Point find_center(const std::vector<Point>& points);

// find the maximum distance from center to the points in the vector
double find_radius(Point center, const std::vector<Point>& points);

#endif //PROJECT1_SMALLEST_CIRCLE_H
